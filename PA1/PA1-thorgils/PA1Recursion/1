
def less_than(a, b):  # ONLY NEEDS TO WORK FOR POSITIVE INTEGERS
    if a == 0:
        return True
    elif b == 0 or a == b:
        return False
    else:
        return less_than(a-1, b-1)


def length(array):
    if array == []:
        return 0
    else:
        return 1 + length(array[1:])


def linear_search(value, arr, start, length):

    if length < start or length == 0:
        return False
    if arr[start] == value:
        return True
    if arr[length-1] == value:
        return True
    return linear_search(value, arr, start+1, length-1)

def unique1(arr):
    new_arr = []
    for i in arr:
        if i not in new_arr:
            new_arr.append(i)
    return new_arr

def unique(arr):
    new_arr = []

    if arr != []:
        if linear_search(arr[0], arr[1:], 0, length(arr[1:])):

            new_arr = unique(arr[1:])
        else:

            new_arr = [arr[0]] + unique(arr[1:])
     else:
         new_arr = []
     return new_arr


# FEEL FREE TO EDIT THE TESTS AND MAKE THEM BETTER
# REMEMBER EDGE CASES!0

def test_less_than(num1, num2):
    if(less_than(num1, num2)):
        print(str(num1) + " is less than " + str(num2))
    else:
        print(str(num1) + " is NOT less than " + str(num2))

def test_unique(lis1):
    print(str(unique(lis1)) + " are the unique items in " + str(lis1))

def run_recursion_program():

    print("\nTESTING LESS THAN:\n")

    test_less_than(8, 3)
    test_less_than(2, 9)
    test_less_than(4, 17)
    test_less_than(11, 3)
    test_less_than(8, 2)
    test_less_than(8, 7)
    test_less_than(7, 8)
    test_less_than(6, 16)
    test_less_than(7, 7)

    print("\nTESTING UNIQUE:\n")

    test_unique(['a', 'f', 'd', 't', 'a', 'b', 'c', 'd', 'e'])
    test_unique(['a', 'b', 'f', 'g', 'a', 't', 'c', 'a', 'b', 'c', 'd', 'e'])
    test_unique(['f', 'g', 't', 'a', 'b', 'c', 'd', 'e'])
    test_unique(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])
    test_unique(['t'])


if __name__ == "__main__":
    run_recursion_program()
